/*
================================================================================

= new game widget

Starting new game involves the following choices:
number of wizards (2-8)
computer wizards same ai same stats as player
for each wizard:
    name text - autogenerated, can be changed
    computer_controlled bool
    sprite and colour displayed but cannot currently be changed

to add
    AI level for each computer controlled wizard
    change playing area size, square or hexagon tiles
*/
select module('Chaos.Client.NewGameWidget');

/*
== data
*/

create domain new_wizard_state as text
  check (value in ('human', 'computer', 'none'));

create table new_game_widget_state (
  line int unique,
  wizard_name text unique,
  sprite text unique references sprites,
  colour text unique,
  state new_wizard_state
);
select set_relvar_type('new_game_widget_state', 'data');
select create_assertion('new_game_widget_state_line_valid',
' not exists(select 1 from new_game_widget_state
  where line >= 8)');

/*
== helpers
*/

create function extract_wizard_state(state text) returns boolean as $$
declare
  ret boolean;
begin
  if state = 'human' then
    ret = false;
  elseif state = 'computer' then
    ret = true;
  else
    raise exception
      'argument must be human or computer, called with %', state;
  end if;
  return ret;
end
$$ language plpgsql immutable;

create function action_reset_new_game_widget_state() returns void as $$
begin
    delete from new_game_widget_state;
    insert into new_game_widget_state
      (line, wizard_name, sprite, colour, state) values
      (0, 'Buddha', 'wizard0', 'blue', 'human'),
      (1, 'Kong Fuzi', 'wizard1', 'purple', 'computer'),
      (2, 'Laozi', 'wizard2', 'cyan', 'computer'),
      (3, 'Moshe', 'wizard3', 'yellow', 'computer'),
      (4, 'Muhammad', 'wizard4', 'green', 'computer'),
      (5, 'Shiva', 'wizard5', 'red', 'computer'),
      (6, 'Yeshua', 'wizard6', 'white', 'computer'),
      (7, 'Zarathushthra', 'wizard7', 'orange', 'computer');
end
$$ language plpgsql volatile;

/*
== actions
*/

create function action_client_new_game_using_new_game_widget_state()
  returns void as $$
begin
  /*delete from action_client_new_game_argument;
  insert into action_client_new_game_argument
    (place, wizard_name, sprite, colour, computer_controlled)
    select line, wizard_name, sprite, colour,
      case when state = 'computer' then true
           else false end
      from new_game_widget_state
      where state != 'none';*/

  perform action_client_new_game(
    (select array_agg((line,wizard_name,sprite,colour,
                      case when state = 'computer' then true
                        else false end)::client_new_game_t)
     from new_game_widget_state));
end
$$ language plpgsql volatile;

/*

================================================================================

= info widget (split?)

turn phase spell, cursor info & highlight key, cursor & selected piece info

================================================================================

= planned widget notes:

== help widget
=== controls
=== tutorials/ examples
=== rules reference
== spell info, monster info - reference widget
== wizard army widget
== versioning access widget
== action history widget
== game manager widget
== power/ debugger widget
*/